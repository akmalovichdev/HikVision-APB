#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import mysql.connector
from mysql.connector import Error
from datetime import datetime
import os
from dotenv import load_dotenv

load_dotenv()


class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MySQL –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö APB —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self):
        self.host = os.getenv("DB_HOST", "localhost")
        self.port = int(os.getenv("DB_PORT", 3306))
        self.database = os.getenv("DB_NAME", "apb_system")
        self.user = os.getenv("DB_USER", "root")
        self.password = os.getenv("DB_PASSWORD", "")
        self.connection = None

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = mysql.connector.connect(
                host=self.host,
                port=self.port,
                database=self.database,
                user=self.user,
                password=self.password,
                autocommit=True
            )
            if self.connection.is_connected():
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MySQL –±–∞–∑–µ: {self.database}")
                return True
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL: {e}")
            return False

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self.connection and self.connection.is_connected():
            self.connection.close()
            print("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MySQL")

    def initialize_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü"""
        try:
            cursor = self.connection.cursor()

            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (APB)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS user_states (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    user_name VARCHAR(255) NOT NULL UNIQUE,
                    state ENUM('inside', 'outside') NOT NULL DEFAULT 'outside',
                    last_terminal VARCHAR(50),
                    last_event_time DATETIME,
                    last_reset_date DATE,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    INDEX idx_user_name (user_name),
                    INDEX idx_state (state)
                )
            """)

            # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ —Å–æ–±—ã—Ç–∏–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS event_logs (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    user_name VARCHAR(255) NOT NULL,
                    terminal_ip VARCHAR(50) NOT NULL,
                    terminal_type ENUM('entry', 'exit') NOT NULL,
                    event_type VARCHAR(50),
                    sub_event_type INT,
                    action_taken VARCHAR(100),
                    state_before ENUM('inside', 'outside'),
                    state_after ENUM('inside', 'outside'),
                    door_opened BOOLEAN DEFAULT FALSE,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    INDEX idx_user_name (user_name),
                    INDEX idx_terminal (terminal_ip),
                    INDEX idx_created_at (created_at)
                )
            """)

            # –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS system_config (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    config_key VARCHAR(100) NOT NULL UNIQUE,
                    config_value TEXT,
                    description TEXT,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
                )
            """)

            cursor.close()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            return False

    def get_user_state(self, user_name):
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: ('inside' | 'outside', last_terminal, last_event_time)
        """
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                "SELECT state, last_terminal, last_event_time, last_reset_date FROM user_states WHERE user_name = %s",
                (user_name,)
            )
            result = cursor.fetchone()
            cursor.close()

            if result:
                return {
                    'state': result[0],
                    'last_terminal': result[1],
                    'last_event_time': result[2],
                    'last_reset_date': result[3]
                }
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
                return self.create_user_state(user_name)
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {'state': 'outside', 'last_terminal': None, 'last_event_time': None, 'last_reset_date': None}

    def create_user_state(self, user_name):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cursor = self.connection.cursor()
            today = datetime.now().date()
            cursor.execute(
                """INSERT INTO user_states (user_name, state, last_reset_date) 
                   VALUES (%s, 'outside', %s)""",
                (user_name, today)
            )
            cursor.close()
            print(f"‚ûï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}")
            return {'state': 'outside', 'last_terminal': None, 'last_event_time': None, 'last_reset_date': today}
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {'state': 'outside', 'last_terminal': None, 'last_event_time': None, 'last_reset_date': None}

    def update_user_state(self, user_name, new_state, terminal_ip):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cursor = self.connection.cursor()
            now = datetime.now()
            today = now.date()
            cursor.execute(
                """UPDATE user_states 
                   SET state = %s, last_terminal = %s, last_event_time = %s, last_reset_date = %s
                   WHERE user_name = %s""",
                (new_state, terminal_ip, now, today, user_name)
            )
            cursor.close()
            return True
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
            return False

    def log_event(self, user_name, terminal_ip, terminal_type, event_type, sub_event_type,
                  action_taken, state_before, state_after, door_opened):
        """–ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–≥"""
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                """INSERT INTO event_logs 
                   (user_name, terminal_ip, terminal_type, event_type, sub_event_type, 
                    action_taken, state_before, state_after, door_opened)
                   VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)""",
                (user_name, terminal_ip, terminal_type, event_type, sub_event_type,
                 action_taken, state_before, state_after, door_opened)
            )
            cursor.close()
            return True
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: {e}")
            return False

    def reset_daily_states(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞ 'outside' (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ä–∞–∑ –≤ –¥–µ–Ω—å)"""
        try:
            cursor = self.connection.cursor()
            today = datetime.now().date()
            cursor.execute(
                """UPDATE user_states 
                   SET state = 'outside', last_reset_date = %s
                   WHERE last_reset_date < %s OR last_reset_date IS NULL""",
                (today, today)
            )
            affected_rows = cursor.rowcount
            cursor.close()
            print(f"üîÑ –°–±—Ä–æ—à–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {affected_rows}")
            return affected_rows
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
            return 0

    def get_all_users_inside(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–Ω—É—Ç—Ä–∏ –∑–¥–∞–Ω–∏—è"""
        try:
            cursor = self.connection.cursor()
            cursor.execute(
                "SELECT user_name, last_terminal, last_event_time FROM user_states WHERE state = 'inside'"
            )
            results = cursor.fetchall()
            cursor.close()
            return results
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–Ω—É—Ç—Ä–∏: {e}")
            return []

    def get_statistics(self, start_date=None, end_date=None):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        try:
            cursor = self.connection.cursor(dictionary=True)
            query = """
                SELECT 
                    DATE(created_at) as date,
                    terminal_type,
                    COUNT(*) as total_events,
                    COUNT(DISTINCT user_name) as unique_users,
                    SUM(door_opened) as doors_opened
                FROM event_logs
            """
            params = []

            if start_date and end_date:
                query += " WHERE created_at BETWEEN %s AND %s"
                params = [start_date, end_date]
            elif start_date:
                query += " WHERE created_at >= %s"
                params = [start_date]

            query += " GROUP BY DATE(created_at), terminal_type ORDER BY date DESC"

            cursor.execute(query, params)
            results = cursor.fetchall()
            cursor.close()
            return results
        except Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return []


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

