#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è APB —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ Flask —Å–µ—Ä–≤–µ—Ä
"""

import requests
import json
import time

# URL —Å–µ—Ä–≤–µ—Ä–∞ APB
SERVER_URL = "http://192.168.100.229:3000"

# –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
USERS = ["–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞"]

# –¢–µ—Ä–º–∏–Ω–∞–ª—ã
TERMINALS = {
    "entry": ["192.168.18.221", "192.168.18.223", "192.168.18.225", "192.168.18.227", "192.168.18.229"],
    "exit": ["192.168.18.222", "192.168.18.224", "192.168.18.226", "192.168.18.228", "192.168.18.230"]
}


def send_event(user_name, terminal_ip, sub_event_type=75):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    
    event_data = {
        "AccessControllerEvent": {
            "subEventType": sub_event_type,  # 75 - –∫–∞—Ä—Ç–∞, 117 - –ª–∏—Ü–æ
            "name": user_name,
            "cardNo": "1234567890",
            "majorEventType": 5,
            "dateTime": time.strftime("%Y-%m-%dT%H:%M:%S"),
        }
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ form-data (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç Hikvision)
    data = {
        "AccessControllerEvent": json.dumps(event_data["AccessControllerEvent"])
    }
    
    try:
        # –≠–º—É–ª–∏—Ä—É–µ–º remote_addr —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ Flask –±–µ—Ä–µ—Ç –∏–∑ request.remote_addr)
        # –î–ª—è —Ç–µ—Å—Ç–∞ –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º main.py –¥–ª—è —á—Ç–µ–Ω–∏—è X-Forwarded-For
        response = requests.post(
            f"{SERVER_URL}/event",
            data=data,
            headers={"X-Forwarded-For": terminal_ip}
        )
        
        if response.status_code == 200:
            print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_name} ‚Üí {terminal_ip}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")


def test_normal_flow():
    """–¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ - –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ - –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥")
    print("="*60)
    
    user = USERS[0]
    
    print(f"\n1. {user} –≤—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª 221...")
    send_event(user, TERMINALS["entry"][0])
    time.sleep(2)
    
    print(f"\n2. {user} –≤—ã—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª 222...")
    send_event(user, TERMINALS["exit"][0])
    time.sleep(2)


def test_double_entry_violation():
    """–¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (–Ω–∞—Ä—É—à–µ–Ω–∏–µ APB)"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 2: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)")
    print("="*60)
    
    user = USERS[1]
    
    print(f"\n1. {user} –≤—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª 223...")
    send_event(user, TERMINALS["entry"][1])
    time.sleep(2)
    
    print(f"\n2. {user} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª 225 (–ù–ê–†–£–®–ï–ù–ò–ï)...")
    send_event(user, TERMINALS["entry"][2])
    time.sleep(2)
    
    print(f"\n3. {user} –≤—ã—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª 224...")
    send_event(user, TERMINALS["exit"][1])
    time.sleep(2)


def test_exit_without_entry():
    """–¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –±–µ–∑ –≤—Ö–æ–¥–∞"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 3: –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –±–µ–∑ –≤—Ö–æ–¥–∞")
    print("="*60)
    
    user = USERS[2]
    
    print(f"\n1. {user} –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–π—Ç–∏ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª 226 (–Ω–µ –≤—Ö–æ–¥–∏–ª)...")
    send_event(user, TERMINALS["exit"][2])
    time.sleep(2)


def test_multiple_terminals():
    """–¢–µ—Å—Ç 4: –†–∞–∑–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–∞–ª—ã –¥–ª—è –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 4: –í—Ö–æ–¥ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª, –≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π")
    print("="*60)
    
    user = USERS[0]
    
    print(f"\n1. {user} –≤—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª 227...")
    send_event(user, TERMINALS["entry"][3])
    time.sleep(2)
    
    print(f"\n2. {user} –≤—ã—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª 230 (–¥—Ä—É–≥–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª)...")
    send_event(user, TERMINALS["exit"][4])
    time.sleep(2)


def test_face_recognition():
    """–¢–µ—Å—Ç 5: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü–∞ (sub_event_type = 117)"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 5: –°–æ–±—ã—Ç–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü–∞")
    print("="*60)
    
    user = USERS[1]
    
    print(f"\n1. {user} –≤—Ö–æ–¥–∏—Ç –ø–æ –ª–∏—Ü—É —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª 229...")
    send_event(user, TERMINALS["entry"][4], sub_event_type=117)
    time.sleep(2)


def check_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("\n" + "="*60)
    print("–¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
    print("="*60)
    
    try:
        response = requests.get(f"{SERVER_URL}/status")
        if response.status_code == 200:
            data = response.json()
            print(f"\nüìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–Ω—É—Ç—Ä–∏: {data['users_inside_count']}")
            
            if data['users_inside']:
                print("\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–Ω—É—Ç—Ä–∏:")
                for user in data['users_inside']:
                    print(f"   - {user['name']} (—Ç–µ—Ä–º–∏–Ω–∞–ª: {user['last_terminal']}, –≤—Ä–µ–º—è: {user['last_event']})")
            else:
                print("\n‚úÖ –í—Å–µ —Å–Ω–∞—Ä—É–∂–∏")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï APB –°–ò–°–¢–ï–ú–´")
    print("="*60)
    print("\n‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python main.py")
    print(f"üì° URL —Å–µ—Ä–≤–µ—Ä–∞: {SERVER_URL}")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(SERVER_URL)
        if response.status_code != 200:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
            return
    except:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É {SERVER_URL}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ main.py –∑–∞–ø—É—â–µ–Ω!")
        return
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_normal_flow()
    check_status()
    
    test_double_entry_violation()
    check_status()
    
    test_exit_without_entry()
    check_status()
    
    test_multiple_terminals()
    check_status()
    
    test_face_recognition()
    check_status()
    
    print("\n" + "="*60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("="*60)
    print("\nüìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ main.py –∏ —Ç–∞–±–ª–∏—Ü—É event_logs –≤ MySQL")
    print("   –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É logs/ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤ —Å–æ–±—ã—Ç–∏–π")


if __name__ == "__main__":
    main()

