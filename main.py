#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from flask import Flask, request
import os
import json
from datetime import datetime, time as dt_time
from ctypes import *
import threading
import time
from dotenv import load_dotenv
from db import db

# =============================
#   –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# =============================

load_dotenv()

# –¢–µ—Ä–º–∏–Ω–∞–ª—ã –≤—Ö–æ–¥–∞ (–Ω–µ—á–µ—Ç–Ω—ã–µ)
TERMINALS_IN = [
    os.getenv("TERMINAL_IN_1"),
    os.getenv("TERMINAL_IN_2"),
    os.getenv("TERMINAL_IN_3"),
    os.getenv("TERMINAL_IN_4"),
    os.getenv("TERMINAL_IN_5"),
]

# –¢–µ—Ä–º–∏–Ω–∞–ª—ã –≤—ã—Ö–æ–¥–∞ (—á–µ—Ç–Ω—ã–µ)
TERMINALS_OUT = [
    os.getenv("TERMINAL_OUT_1"),
    os.getenv("TERMINAL_OUT_2"),
    os.getenv("TERMINAL_OUT_3"),
    os.getenv("TERMINAL_OUT_4"),
    os.getenv("TERMINAL_OUT_5"),
]

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
PORT = int(os.getenv("TERMINAL_PORT"))
USER = os.getenv("TERMINAL_USER").encode()
PASS = os.getenv("TERMINAL_PASSWORD").encode()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ APB
RESET_TIME = os.getenv("RESET_TIME")  # –í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞
DOOR_OPEN_TIME = int(os.getenv("DOOR_OPEN_TIME"))

# =============================
#   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK
# =============================

sdk = cdll.LoadLibrary("./lib/HCNetSDK.dll")
sdk.NET_DVR_Init()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è user_id –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞–º –≤—Ö–æ–¥–∞
terminal_connections = {}

print("=" * 60)
print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞–º –≤—Ö–æ–¥–∞...")
print("=" * 60)

for terminal_ip in TERMINALS_IN:
    ip_bytes = terminal_ip.encode()
    user_id = sdk.NET_DVR_Login_V30(ip_bytes, PORT, USER, PASS, None)
    
    if user_id < 0:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {terminal_ip}")
    else:
        terminal_connections[terminal_ip] = user_id
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {terminal_ip} (user_id: {user_id})")

if not terminal_connections:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É —Ç–µ—Ä–º–∏–Ω–∞–ª—É!")
    exit(1)

print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {len(terminal_connections)} —Ç–µ—Ä–º–∏–Ω–∞–ª–∞–º –≤—Ö–æ–¥–∞")

# =============================
#   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
# =============================

if not db.connect():
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    exit(1)

db.initialize_tables()

# =============================
#   –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–µ—Ä—å—é
# =============================

def open_door(terminal_ip, door_no=1, open_time=DOOR_OPEN_TIME):
    """–û—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
    user_id = terminal_connections.get(terminal_ip)
    
    if not user_id:
        print(f"‚ö†Ô∏è –¢–µ—Ä–º–∏–Ω–∞–ª {terminal_ip} –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ SDK")
        return False
    
    try:
        print(f"üîì –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–≤–µ—Ä—å –Ω–∞ {terminal_ip} (–¥–≤–µ—Ä—å {door_no}) –Ω–∞ {open_time} —Å–µ–∫...")
        result = sdk.NET_DVR_ControlGateway(user_id, door_no, 1)  # open door
        
        if result == 0:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å –Ω–∞ {terminal_ip}")
            return False
        
        time.sleep(open_time)
        sdk.NET_DVR_ControlGateway(user_id, door_no, 3)  # close door
        print(f"üö™ –î–≤–µ—Ä—å –Ω–∞ {terminal_ip} —Å–Ω–æ–≤–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–µ—Ä—å—é –Ω–∞ {terminal_ip}: {e}")
        return False


# =============================
#   –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# =============================

last_reset_date = datetime.now().date()

def reset_states_scheduler():
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    global last_reset_date
    
    while True:
        try:
            now = datetime.now()
            current_date = now.date()
            current_time = now.time()
            
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞
            reset_hour, reset_minute = map(int, RESET_TIME.split(":"))
            reset_time = dt_time(reset_hour, reset_minute)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ —Å–±—Ä–æ—Å
            if current_date > last_reset_date and current_time >= reset_time:
                print("\n" + "=" * 60)
                print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ {now.strftime('%Y-%m-%d %H:%M:%S')}")
                print("=" * 60)
                
                affected = db.reset_daily_states()
                last_reset_date = current_date
                
                print(f"‚úÖ –°–±—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {affected}\n")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            time.sleep(60)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Å–±—Ä–æ—Å–∞: {e}")
            time.sleep(60)


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Å–±—Ä–æ—Å–∞
reset_thread = threading.Thread(target=reset_states_scheduler, daemon=True)
reset_thread.start()

# =============================
#   –õ–æ–≥–∏–∫–∞ APB
# =============================

def determine_terminal_type(device_ip):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –ø–æ IP"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É IP
    last_octet = int(device_ip.split('.')[-1])
    
    if last_octet % 2 == 1:  # –ù–µ—á–µ—Ç–Ω—ã–π - –≤—Ö–æ–¥
        return "entry"
    else:  # –ß–µ—Ç–Ω—ã–π - –≤—ã—Ö–æ–¥
        return "exit"


def process_apb_event(user_name, device_ip, sub_event_type):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ª–æ–≥–∏–∫–∏ Anti-Passback
    
    –ü—Ä–∞–≤–∏–ª–∞:
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–∏, –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤—Ö–æ–¥–∞
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–∞—Ä—É–∂–∏, –æ–Ω –º–æ–∂–µ—Ç –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –ª—é–±–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª –≤—Ö–æ–¥–∞
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–∏, –æ–Ω –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ —á–µ—Ä–µ–∑ –ª—é–±–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª –≤—ã—Ö–æ–¥–∞
    - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–∞—Ä—É–∂–∏, –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –≤—ã–π—Ç–∏ (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
    """
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user_data = db.get_user_state(user_name)
    current_state = user_data['state']
    terminal_type = determine_terminal_type(device_ip)
    
    print(f"\n{'='*60}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}")
    print(f"üìç –¢–µ—Ä–º–∏–Ω–∞–ª: {device_ip} ({terminal_type})")
    print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    print(f"{'='*60}")
    
    action_taken = None
    door_opened = False
    new_state = current_state
    
    # ===== –¢–ï–†–ú–ò–ù–ê–õ –í–•–û–î–ê =====
    if terminal_type == "entry":
        if current_state == "inside":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–Ω—É—Ç—Ä–∏ - –∑–∞–ø—Ä–µ—â–∞–µ–º –≤—Ö–æ–¥
            action_taken = "–í–•–û–î –ó–ê–ü–†–ï–©–ï–ù - —É–∂–µ –≤–Ω—É—Ç—Ä–∏"
            print(f"‚õî {user_name} —É–∂–µ –≤–Ω—É—Ç—Ä–∏ –∑–¥–∞–Ω–∏—è - –∑–∞–ø—Ä–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞")
            door_opened = False
            
        else:  # current_state == "outside"
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–∞—Ä—É–∂–∏ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Ö–æ–¥
            action_taken = "–í–•–û–î –†–ê–ó–†–ï–®–ï–ù"
            print(f"‚úÖ {user_name} –≤—Ö–æ–¥–∏—Ç –≤ –∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {device_ip}")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–≤–µ—Ä—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=open_door, args=(device_ip,)).start()
            door_opened = True
            new_state = "inside"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
            db.update_user_state(user_name, new_state, device_ip)
    
    # ===== –¢–ï–†–ú–ò–ù–ê–õ –í–´–•–û–î–ê =====
    elif terminal_type == "exit":
        if current_state == "inside":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–∏ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—ã—Ö–æ–¥
            action_taken = "–í–´–•–û–î –†–ê–ó–†–ï–®–ï–ù"
            print(f"üö™ {user_name} –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ {device_ip}")
            
            # –ù–∞ –≤—ã—Ö–æ–¥–µ –º—ã –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–µ—Ä—å—é —á–µ—Ä–µ–∑ SDK (—Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã)
            # –ù–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            door_opened = False
            new_state = "outside"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
            db.update_user_state(user_name, new_state, device_ip)
            
        else:  # current_state == "outside"
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–∞—Ä—É–∂–∏ –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–π—Ç–∏ - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            action_taken = "–í–´–•–û–î –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï - –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏"
            print(f"‚ö†Ô∏è {user_name} –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–π—Ç–∏, –Ω–æ –Ω–µ —á–∏—Å–ª–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∑–¥–∞–Ω–∏—è")
            door_opened = False
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–≥
    db.log_event(
        user_name=user_name,
        terminal_ip=device_ip,
        terminal_type=terminal_type,
        event_type="AccessControl",
        sub_event_type=sub_event_type,
        action_taken=action_taken,
        state_before=current_state,
        state_after=new_state,
        door_opened=door_opened
    )
    
    print(f"‚úèÔ∏è  –î–µ–π—Å—Ç–≤–∏–µ: {action_taken}")
    print(f"üîÑ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {new_state}")
    print(f"{'='*60}\n")


# =============================
#   Flask —Å–µ—Ä–≤–µ—Ä
# =============================

app = Flask(__name__)
os.makedirs("logs", exist_ok=True)


@app.route("/event", methods=["POST"])
def event():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ Hikvision"""
    ts = datetime.utcnow().strftime("%Y%m%d_%H%M%S_%f")
    log_dir = f"logs/{ts}"
    os.makedirs(log_dir, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    with open(f"{log_dir}/headers.json", "w", encoding="utf-8") as f:
        json.dump(dict(request.headers), f, indent=4, ensure_ascii=False)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    for key in request.files:
        file = request.files[key]
        file.save(os.path.join(log_dir, file.filename))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ form-data
    for key, val in request.form.items():
        try:
            data = json.loads(val)
            with open(f"{log_dir}/{key}.json", "w", encoding="utf-8") as f:
                json.dump(data, f, indent=4, ensure_ascii=False)

            # ========== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏—è AccessControllerEvent ==========
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–±–æ –∫–ª—é—á –≤ –¥–∞–Ω–Ω—ã—Ö, –ª–∏–±–æ —Å–∞–º –∫–ª—é—á = "AccessControllerEvent"
            if "AccessControllerEvent" in data:
                ev = data["AccessControllerEvent"]
            elif key == "AccessControllerEvent":
                # –î–∞–Ω–Ω—ã–µ —É–∂–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã –∏ –ª–µ–∂–∞—Ç –≤ data –Ω–∞–ø—Ä—è–º—É—é
                ev = data
            else:
                continue  # –≠—Ç–æ –Ω–µ —Å–æ–±—ã—Ç–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–∞
            
            sub_type = ev.get("subEventType")
            user = ev.get("name", "")
            
            # –ü–æ–ª—É—á–∞–µ–º IP —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º X-Forwarded-For)
            device_ip = request.headers.get('X-Forwarded-For', request.remote_addr)
            if ',' in device_ip:
                device_ip = device_ip.split(',')[0].strip()

            # –°–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: 75 (–ø–æ –∫–∞—Ä—Ç–µ) –∏–ª–∏ 117 (–ø–æ –ª–∏—Ü—É)
            if sub_type in [75, 117]:
                process_apb_event(user, device_ip, sub_type)

        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ JSON, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            with open(f"{log_dir}/{key}.txt", "w", encoding="utf-8") as f:
                f.write(val)
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

    print(f"üìù –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {log_dir}")
    return "OK", 200


@app.route("/", methods=["GET"])
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    return "‚úÖ Hikvision APB System Active", 200


@app.route("/status", methods=["GET"])
def status():
    """–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ —Ç–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–Ω—É—Ç—Ä–∏"""
    users_inside = db.get_all_users_inside()
    
    return {
        "status": "active",
        "terminals_connected": len(terminal_connections),
        "terminals_in": TERMINALS_IN,
        "terminals_out": TERMINALS_OUT,
        "users_inside_count": len(users_inside),
        "users_inside": [
            {
                "name": u[0],
                "last_terminal": u[1],
                "last_event": u[2].strftime("%Y-%m-%d %H:%M:%S") if u[2] else None
            }
            for u in users_inside
        ]
    }, 200


@app.route("/reset", methods=["POST"])
def manual_reset():
    """–†—É—á–Ω–æ–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    affected = db.reset_daily_states()
    return {
        "status": "success",
        "message": f"–°–±—Ä–æ—à–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {affected}"
    }, 200


# =============================
#   –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# =============================

if __name__ == "__main__":
    try:
        flask_host = os.getenv("FLASK_HOST", "0.0.0.0")
        flask_port = int(os.getenv("FLASK_PORT", 3000))
        
        print("\n" + "=" * 60)
        print(f"üöÄ APB System –∑–∞–ø—É—â–µ–Ω –Ω–∞ {flask_host}:{flask_port}")
        print(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –≤—Ö–æ–¥–∞: {len(terminal_connections)}")
        print(f"üîÑ –í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {RESET_TIME}")
        print("=" * 60 + "\n")
        
        app.run(host=flask_host, port=flask_port, debug=False)
        
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –≤—Å–µ—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤
        for terminal_ip, user_id in terminal_connections.items():
            sdk.NET_DVR_Logout(user_id)
            print(f"üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç {terminal_ip}")
        
        sdk.NET_DVR_Cleanup()
        db.disconnect()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
