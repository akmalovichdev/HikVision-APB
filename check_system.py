#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –ë–î, —Ç–µ—Ä–º–∏–Ω–∞–ª—ã, SDK
"""

import os
import sys
from dotenv import load_dotenv
import socket

# –¶–≤–µ—Ç–Ω—ã–µ –≤—ã–≤–æ–¥—ã
GREEN = '\033[92m'
RED = '\033[91m'
YELLOW = '\033[93m'
BLUE = '\033[94m'
RESET = '\033[0m'

def print_success(msg):
    print(f"{GREEN}‚úÖ {msg}{RESET}")

def print_error(msg):
    print(f"{RED}‚ùå {msg}{RESET}")

def print_warning(msg):
    print(f"{YELLOW}‚ö†Ô∏è  {msg}{RESET}")

def print_info(msg):
    print(f"{BLUE}‚ÑπÔ∏è  {msg}{RESET}")

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞"""
    print("\n" + "="*60)
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("="*60)
    
    if not os.path.exists('.env'):
        print_error("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print_info("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        return False
    
    print_success("–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
    return True

def check_env_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\n" + "="*60)
    print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("="*60)
    
    load_dotenv()
    
    required_vars = [
        "TERMINAL_IN_1", "TERMINAL_IN_2", "TERMINAL_IN_3", 
        "TERMINAL_IN_4", "TERMINAL_IN_5",
        "TERMINAL_OUT_1", "TERMINAL_OUT_2", "TERMINAL_OUT_3", 
        "TERMINAL_OUT_4", "TERMINAL_OUT_5",
        "TERMINAL_USER", "TERMINAL_PASSWORD",
        "DB_HOST", "DB_NAME", "DB_USER", "DB_PASSWORD"
    ]
    
    missing = []
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing.append(var)
    
    if missing:
        print_error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing)}")
        return False
    
    print_success("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True

def check_mysql():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL"""
    print("\n" + "="*60)
    print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL")
    print("="*60)
    
    try:
        import mysql.connector
        from mysql.connector import Error
        
        host = os.getenv("DB_HOST", "localhost")
        port = int(os.getenv("DB_PORT", 3306))
        database = os.getenv("DB_NAME", "apb_system")
        user = os.getenv("DB_USER", "root")
        password = os.getenv("DB_PASSWORD", "")
        
        print_info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {user}@{host}:{port}/{database}...")
        
        connection = mysql.connector.connect(
            host=host,
            port=port,
            database=database,
            user=user,
            password=password
        )
        
        if connection.is_connected():
            print_success(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MySQL: {database}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
            cursor = connection.cursor()
            cursor.execute("SHOW TABLES")
            tables = cursor.fetchall()
            
            required_tables = ['user_states', 'event_logs', 'system_config']
            existing_tables = [table[0] for table in tables]
            
            missing_tables = [t for t in required_tables if t not in existing_tables]
            
            if missing_tables:
                print_warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
                print_info("–¢–∞–±–ª–∏—Ü—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ")
            else:
                print_success("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            
            cursor.close()
            connection.close()
            return True
        
    except Exception as e:
        print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MySQL: {e}")
        print_info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MySQL –∑–∞–ø—É—â–µ–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ .env –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
        return False

def check_sdk():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è HCNetSDK.dll"""
    print("\n" + "="*60)
    print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ HCNetSDK.dll")
    print("="*60)
    
    dll_path = "./lib/HCNetSDK.dll"
    
    if not os.path.exists(dll_path):
        print_error("HCNetSDK.dll –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print_info("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ HCNetSDK.dll –≤ –ø–∞–ø–∫—É lib")
        return False
    
    print_success("HCNetSDK.dll –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    file_size = os.path.getsize(dll_path)
    print_info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / 1024 / 1024:.2f} MB")
    
    return True

def check_network_connectivity(ip, port=8000):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ IP –∞–¥—Ä–µ—Å–∞"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(2)
        result = sock.connect_ex((ip, port))
        sock.close()
        return result == 0
    except:
        return False

def check_terminals():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –≤ —Å–µ—Ç–∏"""
    print("\n" + "="*60)
    print("5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤")
    print("="*60)
    
    terminals_in = [
        os.getenv("TERMINAL_IN_1"),
        os.getenv("TERMINAL_IN_2"),
        os.getenv("TERMINAL_IN_3"),
        os.getenv("TERMINAL_IN_4"),
        os.getenv("TERMINAL_IN_5"),
    ]
    
    terminals_out = [
        os.getenv("TERMINAL_OUT_1"),
        os.getenv("TERMINAL_OUT_2"),
        os.getenv("TERMINAL_OUT_3"),
        os.getenv("TERMINAL_OUT_4"),
        os.getenv("TERMINAL_OUT_5"),
    ]
    
    port = int(os.getenv("TERMINAL_PORT", 8000))
    
    print("\nüì• –¢–µ—Ä–º–∏–Ω–∞–ª—ã –≤—Ö–æ–¥–∞:")
    available_in = 0
    for ip in terminals_in:
        if check_network_connectivity(ip, port):
            print_success(f"{ip} –¥–æ—Å—Ç—É–ø–µ–Ω")
            available_in += 1
        else:
            print_warning(f"{ip} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print("\nüì§ –¢–µ—Ä–º–∏–Ω–∞–ª—ã –≤—ã—Ö–æ–¥–∞:")
    available_out = 0
    for ip in terminals_out:
        if check_network_connectivity(ip, port):
            print_success(f"{ip} –¥–æ—Å—Ç—É–ø–µ–Ω")
            available_out += 1
        else:
            print_warning(f"{ip} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print(f"\nüìä –î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –≤—Ö–æ–¥–∞: {available_in}/5")
    print(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –≤—ã—Ö–æ–¥–∞: {available_out}/5")
    
    if available_in == 0:
        print_error("–ù–∏ –æ–¥–∏–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª –≤—Ö–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return False
    elif available_in < 5:
        print_warning("–ù–µ –≤—Å–µ —Ç–µ—Ä–º–∏–Ω–∞–ª—ã –≤—Ö–æ–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã")
    
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\n" + "="*60)
    print("6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python")
    print("="*60)
    
    required_packages = {
        'flask': 'Flask',
        'dotenv': 'python-dotenv',
        'mysql.connector': 'mysql-connector-python'
    }
    
    missing = []
    
    for module, package in required_packages.items():
        try:
            __import__(module)
            print_success(f"{package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            print_error(f"{package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing.append(package)
    
    if missing:
        print_info(f"\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"  pip install {' '.join(missing)}")
        return False
    
    return True

def check_logs_directory():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤"""
    print("\n" + "="*60)
    print("7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤")
    print("="*60)
    
    logs_dir = "logs"
    
    if not os.path.exists(logs_dir):
        try:
            os.makedirs(logs_dir)
            print_success("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            print_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs: {e}")
            return False
    else:
        print_success("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    return True

def main():
    print("\n" + "="*60)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò APB –°–ò–°–¢–ï–ú–´")
    print("="*60)
    
    checks = [
        ("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", check_env_file),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_env_variables),
        ("MySQL", check_mysql),
        ("SDK DLL", check_sdk),
        ("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤", check_terminals),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python", check_dependencies),
        ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤", check_logs_directory),
    ]
    
    results = []
    
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ '{name}': {e}")
            results.append((name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{status} - {name}")
    
    print("\n" + "="*60)
    
    if passed == total:
        print_success(f"–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã ({passed}/{total})!")
        print_info("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É: python main.py")
        return 0
    else:
        print_warning(f"–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed}/{total}")
        print_error("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∏—Å—Ç–µ–º—ã")
        return 1

if __name__ == "__main__":
    sys.exit(main())

